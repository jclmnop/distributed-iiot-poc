// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: org.wasmcloud.interface.polling

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message, MessageDispatch, MessageFormat,
        SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct AddPollTargetRequest {
    #[serde(rename = "pollInterval")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub poll_interval: Option<u32>,
    #[serde(rename = "targetData")]
    #[serde(with = "serde_bytes")]
    #[serde(default)]
    pub target_data: Vec<u8>,
}

// Encode AddPollTargetRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_add_poll_target_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &AddPollTargetRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.poll_interval.as_ref() {
        e.str("pollInterval")?;
        e.u32(*val)?;
    } else {
        e.null()?;
    }
    e.str("targetData")?;
    e.bytes(&val.target_data)?;
    Ok(())
}

// Decode AddPollTargetRequest from cbor input stream
#[doc(hidden)]
pub fn decode_add_poll_target_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<AddPollTargetRequest, RpcError> {
    let __result = {
        let mut poll_interval: Option<Option<u32>> = Some(None);
        let mut target_data: Option<Vec<u8>> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct AddPollTargetRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        poll_interval = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u32()?))
                        }
                    }
                    1 => target_data = Some(d.bytes()?.to_vec()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "pollInterval" => {
                        poll_interval = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.u32()?))
                        }
                    }
                    "targetData" => target_data = Some(d.bytes()?.to_vec()),
                    _ => d.skip()?,
                }
            }
        }
        AddPollTargetRequest {
            poll_interval: poll_interval.unwrap(),

            target_data: if let Some(__x) = target_data {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field AddPollTargetRequest.target_data (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// If the request was not successful it will contain an error
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct AddPollTargetResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<PollingError>,
}

// Encode AddPollTargetResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_add_poll_target_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &AddPollTargetResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.error.as_ref() {
        e.str("error")?;
        encode_polling_error(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode AddPollTargetResponse from cbor input stream
#[doc(hidden)]
pub fn decode_add_poll_target_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<AddPollTargetResponse, RpcError> {
    let __result = {
        let mut error: Option<Option<PollingError>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct AddPollTargetResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_polling_error(d).map_err(|e| {
                                format!(
                                    "decoding 'org.wasmcloud.interface.polling#PollingError': {}",
                                    e
                                )
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_polling_error(d).map_err(|e| {
                                format!(
                                    "decoding 'org.wasmcloud.interface.polling#PollingError': {}",
                                    e
                                )
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        AddPollTargetResponse {
            error: error.unwrap(),
        }
    };
    Ok(__result)
}
/// A request to manually poll external services/hardware.
///
/// Depending on the provider implementation, leaving `Data` empty may poll all
/// services/hardware, it may perform an entirely different action, or it could
/// return an error.
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct PollRequest {
    /// Bytes which can be serialised from any type of data structure, depending
    /// on the implementation of the provider. For an HTTP based provider it could
    /// be a hash map of API endpoints and parameters, for a NATS based provider
    /// it could be a list of topics to publish to, or it could simply be a list
    /// of Sensor IDs to poll for readings.
    ///
    /// The effect of leaving this empty will depend on the provider implementation.
    #[serde(with = "serde_bytes")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub request_data: Option<Vec<u8>>,
}

// Encode PollRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_poll_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &PollRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.request_data.as_ref() {
        e.str("request_data")?;
        e.bytes(val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode PollRequest from cbor input stream
#[doc(hidden)]
pub fn decode_poll_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<PollRequest, RpcError> {
    let __result = {
        let mut request_data: Option<Option<Vec<u8>>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct PollRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        request_data = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.bytes()?.to_vec()))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "request_data" => {
                        request_data = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.bytes()?.to_vec()))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        PollRequest {
            request_data: request_data.unwrap(),
        }
    };
    Ok(__result)
}
/// Results from either automatic or manual polling of external services/hardware
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct PollResult {
    /// Bytes serialised from a data structure suitable for the type of services
    /// being polled.
    #[serde(with = "serde_bytes")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<u8>>,
    /// If this field is present then there has been an error
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<PollingError>,
}

// Encode PollResult as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_poll_result<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &PollResult,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.data.as_ref() {
        e.str("data")?;
        e.bytes(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.error.as_ref() {
        e.str("error")?;
        encode_polling_error(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode PollResult from cbor input stream
#[doc(hidden)]
pub fn decode_poll_result(d: &mut wasmbus_rpc::cbor::Decoder<'_>) -> Result<PollResult, RpcError> {
    let __result = {
        let mut data: Option<Option<Vec<u8>>> = Some(None);
        let mut error: Option<Option<PollingError>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct PollResult, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        data = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.bytes()?.to_vec()))
                        }
                    }
                    1 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_polling_error(d).map_err(|e| {
                                format!(
                                    "decoding 'org.wasmcloud.interface.polling#PollingError': {}",
                                    e
                                )
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "data" => {
                        data = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.bytes()?.to_vec()))
                        }
                    }
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_polling_error(d).map_err(|e| {
                                format!(
                                    "decoding 'org.wasmcloud.interface.polling#PollingError': {}",
                                    e
                                )
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        PollResult {
            data: data.unwrap(),
            error: error.unwrap(),
        }
    };
    Ok(__result)
}
/// Contains the type or code for an error along with an optional description.
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct PollingError {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "errorType")]
    #[serde(default)]
    pub error_type: String,
}

// Encode PollingError as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_polling_error<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &PollingError,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.description.as_ref() {
        e.str("description")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("errorType")?;
    e.str(&val.error_type)?;
    Ok(())
}

// Decode PollingError from cbor input stream
#[doc(hidden)]
pub fn decode_polling_error(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<PollingError, RpcError> {
    let __result = {
        let mut description: Option<Option<String>> = Some(None);
        let mut error_type: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct PollingError, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        description = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    1 => error_type = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "description" => {
                        description = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(d.str()?.to_string()))
                        }
                    }
                    "errorType" => error_type = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        PollingError {
            description: description.unwrap(),

            error_type: if let Some(__x) = error_type {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field PollingError.error_type (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RemovePollTargetRequest {
    #[serde(rename = "targetData")]
    #[serde(with = "serde_bytes")]
    #[serde(default)]
    pub target_data: Vec<u8>,
}

// Encode RemovePollTargetRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_remove_poll_target_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RemovePollTargetRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    e.str("targetData")?;
    e.bytes(&val.target_data)?;
    Ok(())
}

// Decode RemovePollTargetRequest from cbor input stream
#[doc(hidden)]
pub fn decode_remove_poll_target_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RemovePollTargetRequest, RpcError> {
    let __result = {
        let mut target_data: Option<Vec<u8>> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct RemovePollTargetRequest, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => target_data = Some(d.bytes()?.to_vec()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "targetData" => target_data = Some(d.bytes()?.to_vec()),
                    _ => d.skip()?,
                }
            }
        }
        RemovePollTargetRequest {
            target_data: if let Some(__x) = target_data {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RemovePollTargetRequest.target_data (#0)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// If the request was not successful it will contain an error
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RemovePollTargetResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub error: Option<PollingError>,
}

// Encode RemovePollTargetResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_remove_poll_target_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RemovePollTargetResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(1)?;
    if let Some(val) = val.error.as_ref() {
        e.str("error")?;
        encode_polling_error(e, val)?;
    } else {
        e.null()?;
    }
    Ok(())
}

// Decode RemovePollTargetResponse from cbor input stream
#[doc(hidden)]
pub fn decode_remove_poll_target_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RemovePollTargetResponse, RpcError> {
    let __result = {
        let mut error: Option<Option<PollingError>> = Some(None);

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct RemovePollTargetResponse, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_polling_error(d).map_err(|e| {
                                format!(
                                    "decoding 'org.wasmcloud.interface.polling#PollingError': {}",
                                    e
                                )
                            })?))
                        }
                    }

                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "error" => {
                        error = if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some(decode_polling_error(d).map_err(|e| {
                                format!(
                                    "decoding 'org.wasmcloud.interface.polling#PollingError': {}",
                                    e
                                )
                            })?))
                        }
                    }
                    _ => d.skip()?,
                }
            }
        }
        RemovePollTargetResponse {
            error: error.unwrap(),
        }
    };
    Ok(__result)
}
/// The PollSubscriber interface described an actor interface that receives the
/// results from automatic polling of external services/hardware at a specified
/// interval.
/// wasmbus.contractId: wasmcloud:polling
/// wasmbus.actorReceive
#[async_trait]
pub trait PollSubscriber {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:polling"
    }
    /// Receive results from the latest automatic poll, or simply perform some
    /// functionality without any external input
    async fn poll_rx(&self, ctx: &Context, arg: &PollResult) -> RpcResult<()>;
}

/// PollSubscriberReceiver receives messages defined in the PollSubscriber service trait
/// The PollSubscriber interface described an actor interface that receives the
/// results from automatic polling of external services/hardware at a specified
/// interval.
#[doc(hidden)]
#[async_trait]
pub trait PollSubscriberReceiver: MessageDispatch + PollSubscriber {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "PollRx" => {
                let value: PollResult = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'PollResult': {}", e)))?;

                let _resp = PollSubscriber::poll_rx(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "PollSubscriber::{}",
                message.method
            ))),
        }
    }
}

/// PollSubscriberSender sends messages to a PollSubscriber service
/// The PollSubscriber interface described an actor interface that receives the
/// results from automatic polling of external services/hardware at a specified
/// interval.
/// client for sending PollSubscriber messages
#[derive(Clone, Debug)]
pub struct PollSubscriberSender<T: Transport> {
    transport: T,
}

impl<T: Transport> PollSubscriberSender<T> {
    /// Constructs a PollSubscriberSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send> PollSubscriberSender<wasmbus_rpc::provider::ProviderTransport<'send>> {
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl PollSubscriberSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_actor(actor_id.to_string()).unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> PollSubscriber
    for PollSubscriberSender<T>
{
    #[allow(unused)]
    /// Receive results from the latest automatic poll, or simply perform some
    /// functionality without any external input
    async fn poll_rx(&self, ctx: &Context, arg: &PollResult) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "PollSubscriber.PollRx",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
}

/// The Polling interface describes a service that automatically polls external
/// services/hardware at a set interval, or a service which simply ensures an
/// actor performs certain functionality at a set interval without any external
/// input from the Polling service itself.
///
/// The AddPollTarget and RemovePollTarget operations may not be necessary for
/// all implementations; some implementations might monitor heartbeats from sources
/// configured in the link definition rather than manually adding or removing
/// targets.
/// wasmbus.contractId: wasmcloud:polling
/// wasmbus.providerReceive
#[async_trait]
pub trait Polling {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "wasmcloud:polling"
    }
    /// Manually request the provider to poll any external services/hardware
    async fn poll_tx(&self, ctx: &Context, arg: &PollRequest) -> RpcResult<PollResult>;
    /// Add a new target to be regularly polled
    async fn add_poll_target(
        &self,
        ctx: &Context,
        arg: &AddPollTargetRequest,
    ) -> RpcResult<AddPollTargetResponse>;
    /// Remove a target that's currently being polled so it will no longer be polled
    async fn remove_poll_target(
        &self,
        ctx: &Context,
        arg: &RemovePollTargetRequest,
    ) -> RpcResult<RemovePollTargetResponse>;
}

/// PollingReceiver receives messages defined in the Polling service trait
/// The Polling interface describes a service that automatically polls external
/// services/hardware at a set interval, or a service which simply ensures an
/// actor performs certain functionality at a set interval without any external
/// input from the Polling service itself.
///
/// The AddPollTarget and RemovePollTarget operations may not be necessary for
/// all implementations; some implementations might monitor heartbeats from sources
/// configured in the link definition rather than manually adding or removing
/// targets.
#[doc(hidden)]
#[async_trait]
pub trait PollingReceiver: MessageDispatch + Polling {
    async fn dispatch(&self, ctx: &Context, message: Message<'_>) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "PollTx" => {
                let value: PollRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'PollRequest': {}", e)))?;

                let resp = Polling::poll_tx(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "AddPollTarget" => {
                let value: AddPollTargetRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'AddPollTargetRequest': {}", e)))?;

                let resp = Polling::add_poll_target(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "RemovePollTarget" => {
                let value: RemovePollTargetRequest = wasmbus_rpc::common::deserialize(&message.arg)
                    .map_err(|e| RpcError::Deser(format!("'RemovePollTargetRequest': {}", e)))?;

                let resp = Polling::remove_poll_target(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Polling::{}",
                message.method
            ))),
        }
    }
}

/// PollingSender sends messages to a Polling service
/// The Polling interface describes a service that automatically polls external
/// services/hardware at a set interval, or a service which simply ensures an
/// actor performs certain functionality at a set interval without any external
/// input from the Polling service itself.
///
/// The AddPollTarget and RemovePollTarget operations may not be necessary for
/// all implementations; some implementations might monitor heartbeats from sources
/// configured in the link definition rather than manually adding or removing
/// targets.
/// client for sending Polling messages
#[derive(Clone, Debug)]
pub struct PollingSender<T: Transport> {
    transport: T,
}

impl<T: Transport> PollingSender<T> {
    /// Constructs a PollingSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(target_arch = "wasm32")]
impl PollingSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a Polling provider
    /// implementing the 'wasmcloud:polling' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("wasmcloud:polling", "default")
                .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a Polling provider
    /// implementing the 'wasmcloud:polling' capability contract, with the specified link name
    pub fn new_with_link(link_name: &str) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport =
            wasmbus_rpc::actor::prelude::WasmHost::to_provider("wasmcloud:polling", link_name)?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Polling for PollingSender<T> {
    #[allow(unused)]
    /// Manually request the provider to poll any external services/hardware
    async fn poll_tx(&self, ctx: &Context, arg: &PollRequest) -> RpcResult<PollResult> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Polling.PollTx",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: PollResult = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': PollResult", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    /// Add a new target to be regularly polled
    async fn add_poll_target(
        &self,
        ctx: &Context,
        arg: &AddPollTargetRequest,
    ) -> RpcResult<AddPollTargetResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Polling.AddPollTarget",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: AddPollTargetResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': AddPollTargetResponse", e)))?;
        Ok(value)
    }
    #[allow(unused)]
    /// Remove a target that's currently being polled so it will no longer be polled
    async fn remove_poll_target(
        &self,
        ctx: &Context,
        arg: &RemovePollTargetRequest,
    ) -> RpcResult<RemovePollTargetResponse> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Polling.RemovePollTarget",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: RemovePollTargetResponse = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| RpcError::Deser(format!("'{}': RemovePollTargetResponse", e)))?;
        Ok(value)
    }
}
